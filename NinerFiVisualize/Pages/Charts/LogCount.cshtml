@page "{handler?}"
@model NinerFiVisualize.Pages.Charts.ErrorTrackingModel
@{
    Layout = "../Shared/_ChartsLayout.cshtml";
    ViewData["Title"] = "Log Count";
}

<div class="chart">
    <h2>Log Count</h2>

    <div class="text-center">
        <div class="spinner-border text-success" style="display:none; width: 5rem; height: 5rem;" role="status" aria-label="Spinning loading indicator">
            <!--<span class="sr-only">Loading...</span>-->
        </div>
    </div>

    <canvas id="logsChart" aria-label="Log entries aggregated count by time chart" role="img" style="width: 840px; height: 480px"></canvas>


</div>

@section Scripts
    {
    <script type="application/javascript">

        let responseJSON = null;

        $(document).ready(function () {

            $('.spinner-border').show();

            $.ajax({
                url: '/api/charts/get-log-count',
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: (data) => {
                    responseJSON = data;
                    initializeChart(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(xhr.status);
                    alert(thrownError);
                }
            });
        })

        function initializeChart(response)
        {
            console.log(response);
            const ctx = document.getElementById('logsChart');

            const filtered = d3.rollup(response, v => d3.sum(v, d => d.numberOfLogs), d=>d.month, d => d.day, d=>d.hour);


            //create chart
            const logsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: unroll(filtered,["month", "day", "hour"], "numberOfLogs").map((el, index) => index),
                    datasets: [
                        {
                            label: 'Number of Log Entries',
                            data: unroll(filtered,["month", "day", "hour"], "numberOfLogs").map(({numberOfLogs}) => numberOfLogs),
                            fill: false,
                            backgroundColor: 'rgba(1, 80, 53, 1)',
                            borderColor: 'rgba(1, 80, 53, 0.3)',
                            borderWidth: 1
                        }
                    ],
                },
                options: {
                    responsive: true,
                    layout: {
                        padding: 10
                    },
                    parsing: {
                        xAxisKey: 'Hour',
                        yAxisKey: 'numLogs'
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'January 1st - 10th, 2021',
                            align: 'start',
                        },
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    const item = context[0].raw;
                                    return "Datetime: " + item.year + "-" + item.month + "-" +
                                        item.day + " " + item.hour + ":" + item.minute;
                                },
                                body: (context) => {
                                    context.parsed.x + ' log entries';
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Day'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Number of Entries'
                            }
                        }
                    }
                }
            })

            $('.spinner-border').hide();
        }

        function unroll(rollup, keys, label = "value", p = {}) {
          return Array.from(rollup, ([key, value]) =>
            value instanceof Map
              ? unroll(value, keys.slice(1), label, Object.assign({}, { ...p, [keys[0]]: key } ))
              : Object.assign({}, { ...p, [keys[0]]: key, [label] : value })
          ).flat();
        }

    </script>
    }